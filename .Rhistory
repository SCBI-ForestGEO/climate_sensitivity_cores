if(save.plots)  {
dir.create(paste0("raw_data/climate/Graphs_raw_climate_data/", c), showWarnings = F)
tiff(paste0("raw_data/climate/Graphs_raw_climate_data/", c, "/", v, ".tif"), res = 150, width = 169, height = 169, units = "mm", pointsize = 10)
}
plot(clim[, v] ~ as.Date(paste(clim$year, clim$month, "01", sep = "-")), main = v, type = "l", xlab = "year", ylab = v, las = 1)
if(save.plots) dev.off()
}
}
######################################################
# Purpose: Summarize correlations (or response functions) between tree-ring chronologies and climate variables
# Developped by: Valentine Herrmann - HerrmannV@si.edu
# R version 3.4.4 (2018-03-15)
######################################################
# Clean environment ####
rm(list = ls())
# Set working directory as Shenandoah main folder ####
setwd(".")
# Load libraries ####
library(dplR)
# library(treeclim)
library(bootRes)
source("scripts/my.mdcplot.R")
save.plots <- TRUE
save.result.table <- TRUE
# Define sets of climate data to use ###3
climate.data.types <- c("PRISM_SCBI_1930_2015_30second", "CRU_SCBI_1901_2014", "NOAA_PDSI_Northern_Virginia_1895_2017")
# Summarize tables of results for each climate data ####
for( c in climate.data.types) {
print(c)
## Load tables of results ####
all.dc.corr <- read.csv(paste0("results/tables/monthly_correlations_all_speciess_and_climate_variables/Correlation_with_", c, "_climate_data.csv"))
## Summarize by Variable and by species  ####
### Take the sum of all correlations (absolute) ####
summary_of_correlations_all <- rbind(tapply(all.dc.corr$coef, all.dc.corr$Variable, function(x) sum(abs(x))))
rownames(summary_of_correlations_all) <- "All"
summary_of_correlations_by_sepcies <- tapply(all.dc.corr$coef, list(all.dc.corr$Species, all.dc.corr$Variable) , function(x) sum(abs(x)), simplify = T)
summary_of_correlations <- data.frame(Summary_type = "Sum of all absolute correlations", Species = c(rownames(summary_of_correlations_all), rownames(summary_of_correlations_by_sepcies)), rbind(summary_of_correlations_all, summary_of_correlations_by_sepcies))
### Count the number of significant correlations ####
summary_of_significance_all <- rbind(tapply(all.dc.corr$significant, all.dc.corr$Variable, function(x) sum(x)))
rownames(summary_of_significance_all) <- "All"
summary_of_significance_by_sepcies <- tapply(all.dc.corr$significant, list(all.dc.corr$Species, all.dc.corr$Variable) , function(x) sum(x), simplify = T)
summary_of_significance <- data.frame(Summary_type = "Count of Significant correlations", Species = c(rownames(summary_of_significance_all), rownames(summary_of_significance_by_sepcies)), rbind(summary_of_significance_all, summary_of_significance_by_sepcies))
### Take the sum of all correlations (absolute) that are significant
idx <- all.dc.corr$significant
summary_of_significant_correlations_all <- rbind(tapply(all.dc.corr$coef[idx], all.dc.corr$Variable[idx], function(x) sum(abs(x))))
rownames(summary_of_significant_correlations_all) <- "All"
summary_of_significant_correlations_by_sepcies <- tapply(all.dc.corr$coef[idx], list(all.dc.corr$Species[idx], all.dc.corr$Variable[idx]) , function(x) sum(abs(x)), simplify = T)
summary_of_significant_correlations <- data.frame(Summary_type = "Sum of absolute significant correlations", Species = c(rownames(summary_of_significant_correlations_all), rownames(summary_of_significant_correlations_by_sepcies)), rbind(summary_of_significant_correlations_all, summary_of_significant_correlations_by_sepcies))
# Save ####
write.csv(rbind(summary_of_correlations, summary_of_significance, summary_of_significant_correlations),
file = paste0("results/tables/monthly_correlations_all_speciess_and_climate_variables/SUMMARY_Correlation_with_", c, "_climate_data.csv"), row.names = F)
}
plot(clim[, v] ~ as.Date(paste(clim$year, clim$month, "01", sep = "-")), main = v, type = "l", xlab = "year", ylab = v, las = 1)
clim
c
clim <- read.csv(paste0("raw_data/climate/Formated_", c, ".csv"))
names(clim)
vv = "PCP"
v = "PCP"
plot(clim[, v])
by(plot(clim[, v], clim$year, plot)
)
by(plot(clim[, v], clim$year, plot))
unique(clim$month)
m = 1
clim[clim$month %in% m, v]
as.Date(clim$year)
plot(clim[clim$month %in% m, v] ~ clim$year)
clim[clim$month %in% m, v]
plot(clim[clim$month %in% m, v] ~ clim$year[clim$month %in% m])
plot(clim[clim$month %in% m, v] ~ clim$year[clim$month %in% m], type = "l", ylim = range(clim[, v]))
colors <- rainbow(12)
colors
unique(clim$month)
plot(clim[clim$month %in% m, v] ~ clim$year[clim$month %in% m], type = "l", ylim = range(clim[, v]), col = colors[m])
plot(clim[clim$month %in% m, v] ~ clim$year[clim$month %in% m], type = "l", ylim = range(clim[, v]), col = colors[m], main = v, type = "l", xlab = "year", ylab = v, las = 1)
if(m %in% 1)    plot(clim[clim$month %in% m, v] ~ clim$year[clim$month %in% m], ylim = range(clim[, v]), col = colors[m], main = v, type = "l", xlab = "year", ylab = v, las = 1)
lines(clim[clim$month %in% m, v] ~ clim$year[clim$month %in% m], col = colors[m])
for(m in unique(clim$month)) {
if(m %in% 1) {
plot(clim[clim$month %in% m, v] ~ clim$year[clim$month %in% m], ylim = range(clim[, v]), col = colors[m], main = v, type = "l", xlab = "year", ylab = v, las = 1)
}  else {
lines(clim[clim$month %in% m, v] ~ clim$year[clim$month %in% m], col = colors[m])
}
}
legend("bottomright", col = colors, legend = unique(clim$month), bty = "n")
legend("bottomleft", col = colors, legend = unique(clim$month), bty = "n")
legend("bottomleft", lty = 1, col = colors, legend = unique(clim$month), bty = "n")
legend("bottomleft", lty = 1, col = colors, legend = monthplot[unique(clim$month)], bty = "n", cex = 0.5, title = month)
months[unique(clim$month)]
unique(clim$month)
months
months([unique(clim$month)])
months(unique(clim$month))
months()
month.name[unique(clim$month)]
month.abb[unique(clim$month)]
legend("bottomleft", lty = 1, col = colors, legend = month.abb[unique(clim$month)], bty = "n", cex = 0.5, title = month)
for(m in unique(clim$month)) {
if(m %in% 1) {
plot(clim[clim$month %in% m, v] ~ clim$year[clim$month %in% m], ylim = range(clim[, v]), col = colors[m], main = v, type = "l", xlab = "year", ylab = v, las = 1)
}  else {
lines(clim[clim$month %in% m, v] ~ clim$year[clim$month %in% m], col = colors[m])
}
}
legend("bottomleft", lty = 1, col = colors, legend = month.abb[unique(clim$month)], bty = "n", cex = 0.5, title = month)
legend("bottomleft", lty = 1, col = colors, legend = month.abb[unique(clim$month)], bty = "n", cex = 0.5, title = "month")
legend("bottomleft", lty = 1, col = colors, legend = month.abb[unique(clim$month)], bty = "n", cex = 0.7, title = "month")
legend("bottomleft", lty = 1, col = colors, legend = month.abb[unique(clim$month)], bty = "n", cex = 0.7, title = "month", ncol = 2)
for(m in unique(clim$month)) {
if(m %in% 1) {
plot(clim[clim$month %in% m, v] ~ clim$year[clim$month %in% m], ylim = range(clim[, v]), col = colors[m], main = v, type = "l", xlab = "year", ylab = v, las = 1)
}  else {
lines(clim[clim$month %in% m, v] ~ clim$year[clim$month %in% m], col = colors[m])
}
}
legend("bottomleft", lty = 1, col = colors, legend = month.abb[unique(clim$month)], bty = "n", cex = 0.7, title = "month", ncol = 2)
paste0("raw_data/climate/Graphs_raw_climate_data/", c, "/", v, "_by_month.tif")
save.plots <- TRUE
# plot ####
climate.data.types <- c("PRISM_SCBI_1930_2015_30second", "CRU_SCBI_1901_2014", "NOAA_PDSI_Northern_Virginia_1895_2017")
for( c in climate.data.types) {
print(c)
## Load climate data ####
clim <- read.csv(paste0("raw_data/climate/Formated_", c, ".csv"))
## plot data ####
for(v in names(clim)[-c(1:2)]) {
if(save.plots)  {
dir.create(paste0("raw_data/climate/Graphs_raw_climate_data/", c), showWarnings = F)
tiff(paste0("raw_data/climate/Graphs_raw_climate_data/", c, "/", v, ".tif"), res = 150, width = 169, height = 169, units = "mm", pointsize = 10)
}
plot(clim[, v] ~ as.Date(paste(clim$year, clim$month, "01", sep = "-")), main = v, type = "l", xlab = "year", ylab = v, las = 1)
if(save.plots) dev.off()
if(save.plots)  {
tiff(paste0("raw_data/climate/Graphs_raw_climate_data/", c, "/", v, "_by_month.tif"), res = 150, width = 169, height = 169, units = "mm", pointsize = 10)
}
colors <- rainbow(12)
for(m in unique(clim$month)) {
if(m %in% 1) {
plot(clim[clim$month %in% m, v] ~ clim$year[clim$month %in% m], ylim = range(clim[, v]), col = colors[m], main = v, type = "l", xlab = "year", ylab = v, las = 1)
}  else {
lines(clim[clim$month %in% m, v] ~ clim$year[clim$month %in% m], col = colors[m])
}
}
legend("bottomleft", lty = 1, col = colors, legend = month.abb[unique(clim$month)], bty = "n", cex = 0.7, title = "month", ncol = 2)
if(save.plots) dev.off()
}
}
print(c)
clim$TAVG
range(clim$TAVG)
summary(clim$TAVG)
data(gp.rwl)
data(gp.po)
gp.rwi <- cms(rwl = gp.rwl, po = gp.po)
gp.ids <- read.ids(gp.rwl, stc = c(0, 2, 1))
gp.rwi
# On a running window
rwi.stats.running(gp.rwi, gp.ids)
## With no running window (i.e. running.window = FALSE)
rwi.stats(gp.rwi, gp.ids)
## Restrict to common overlap (in this case 1899 to 1987)
rwi.stats(gp.rwi, gp.ids, period="common")
rwi.stats.legacy(gp.rwi, gp.ids) # rwi.stats prior to dplR 1.5.3
## Plot the chronology showing a potential cutoff year based on EPS
eps.cut <- 0.92 # An arbitrary EPS cutoff for demonstration
gp.crn <- chron(gp.rwi)
## Running stats on the rwi with an window
foo <- rwi.stats.running(gp.rwi, gp.ids, window.length = 80)
foo
yrs <- time(gp.crn)
bar <- data.frame(yrs = c(min(yrs), foo$mid.year, max(yrs)),
eps = c(NA, foo$eps, NA))
par(mar = c(2, 2, 2, 2), mgp = c(1.1, 0.1, 0), tcl = 0.25,
mfcol = c(2, 1), xaxs='i')
plot(yrs, gp.crn[, 1], type = "n", xlab = "Year",
ylab = "RWI", axes=FALSE)
cutoff <- max(bar$yrs[bar$eps < eps.cut], na.rm = TRUE)
xx <- c(500, 500, cutoff, cutoff)
yy <- c(-1, 3, 3, -1)
polygon(xx, yy, col = "grey80")
abline(h = 1, lwd = 1.5)
def.par <- par(no.readonly=TRUE)
## Plot the chronology showing a potential cutoff year based on EPS
eps.cut <- 0.92 # An arbitrary EPS cutoff for demonstration
gp.crn <- chron(gp.rwi)
## Running stats on the rwi with an window
foo <- rwi.stats.running(gp.rwi, gp.ids, window.length = 80)
yrs <- time(gp.crn)
bar <- data.frame(yrs = c(min(yrs), foo$mid.year, max(yrs)),
eps = c(NA, foo$eps, NA))
par(mar = c(2, 2, 2, 2), mgp = c(1.1, 0.1, 0), tcl = 0.25,
mfcol = c(2, 1), xaxs='i')
plot(yrs, gp.crn[, 1], type = "n", xlab = "Year",
ylab = "RWI", axes=FALSE)
cutoff <- max(bar$yrs[bar$eps < eps.cut], na.rm = TRUE)
xx <- c(500, 500, cutoff, cutoff)
yy <- c(-1, 3, 3, -1)
polygon(xx, yy, col = "grey80")
abline(h = 1, lwd = 1.5)
library(utils)
data(gp.rwl)
data(gp.po)
gp.rwi <- cms(rwl = gp.rwl, po = gp.po)
gp.ids <- read.ids(gp.rwl, stc = c(0, 2, 1))
# On a running window
rwi.stats.running(gp.rwi, gp.ids)
## With no running window (i.e. running.window = FALSE)
rwi.stats(gp.rwi, gp.ids)
## Restrict to common overlap (in this case 1899 to 1987)
rwi.stats(gp.rwi, gp.ids, period="common")
rwi.stats.legacy(gp.rwi, gp.ids) # rwi.stats prior to dplR 1.5.3
## Not run:
library(graphics)
def.par <- par(no.readonly=TRUE)
## Plot the chronology showing a potential cutoff year based on EPS
eps.cut <- 0.92 # An arbitrary EPS cutoff for demonstration
gp.crn <- chron(gp.rwi)
## Running stats on the rwi with an window
foo <- rwi.stats.running(gp.rwi, gp.ids, window.length = 80)
yrs <- time(gp.crn)
bar <- data.frame(yrs = c(min(yrs), foo$mid.year, max(yrs)),
eps = c(NA, foo$eps, NA))
par(mar = c(2, 2, 2, 2), mgp = c(1.1, 0.1, 0), tcl = 0.25,
mfcol = c(2, 1), xaxs='i')
plot(yrs, gp.crn[, 1], type = "n", xlab = "Year",
ylab = "RWI", axes=FALSE)
cutoff <- max(bar$yrs[bar$eps < eps.cut], na.rm = TRUE)
xx <- c(500, 500, cutoff, cutoff)
yy <- c(-1, 3, 3, -1)
polygon(xx, yy, col = "grey80")
abline(h = 1, lwd = 1.5)
lines(yrs, gp.crn[, 1], col = "grey50")
lines(yrs, ffcsaps(gp.crn[, 1], nyrs = 32), col = "red", lwd = 2)
axis(1); axis(2); axis(3);
par(new = TRUE)
## Add EPS
plot(bar$yrs, bar$eps, type = "b", xlab = "", ylab = "",
axes = FALSE, pch = 20, col = "blue")
axis(4, at = pretty(foo$eps))
mtext("EPS", side = 4, line = 1.1)
box()
## Second plot is the chronology after the cutoff only
## Chronology is rebuilt using just years after cutoff but
## that difference is essentially nil.
yr.mask <- yrs > cutoff
yrs2 <- yrs[yr.mask]
gp.crn2 <- chron(gp.rwi[yr.mask, ])
plot(yrs2, gp.crn2[, 1], type = "n",
xlab = "Year", ylab = "RWI", axes=FALSE)
abline(h = 1, lwd = 1.5)
lines(yrs2, gp.crn2[, 1], col = "grey50")
lines(yrs2, ffcsaps(gp.crn2[, 1], nyrs = 32),
col = "red", lwd = 2)
axis(1); axis(2); axis(3); axis(4)
box()
par(def.par)
bar
foo
## Running stats on the rwi with an window
foo <- rwi.stats.running(gp.rwi, gp.ids, window.length = 180)
yrs <- time(gp.crn)
bar <- data.frame(yrs = c(min(yrs), foo$mid.year, max(yrs)),
eps = c(NA, foo$eps, NA))
bar
bar <- data.frame(yrs = c(min(yrs), foo$mid.year, max(yrs)),
eps = c(NA, foo$eps, NA))
par(mar = c(2, 2, 2, 2), mgp = c(1.1, 0.1, 0), tcl = 0.25,
mfcol = c(2, 1), xaxs='i')
plot(yrs, gp.crn[, 1], type = "n", xlab = "Year",
ylab = "RWI", axes=FALSE)
cutoff <- max(bar$yrs[bar$eps < eps.cut], na.rm = TRUE)
xx <- c(500, 500, cutoff, cutoff)
yy <- c(-1, 3, 3, -1)
polygon(xx, yy, col = "grey80")
abline(h = 1, lwd = 1.5)
lines(yrs, gp.crn[, 1], col = "grey50")
lines(yrs, ffcsaps(gp.crn[, 1], nyrs = 32), col = "red", lwd = 2)
axis(1); axis(2); axis(3);
par(new = TRUE)
## Add EPS
plot(bar$yrs, bar$eps, type = "b", xlab = "", ylab = "",
axes = FALSE, pch = 20, col = "blue")
axis(4, at = pretty(foo$eps))
mtext("EPS", side = 4, line = 1.1)
box()
## Second plot is the chronology after the cutoff only
## Chronology is rebuilt using just years after cutoff but
## that difference is essentially nil.
yr.mask <- yrs > cutoff
yrs2 <- yrs[yr.mask]
gp.crn2 <- chron(gp.rwi[yr.mask, ])
plot(yrs2, gp.crn2[, 1], type = "n",
xlab = "Year", ylab = "RWI", axes=FALSE)
abline(h = 1, lwd = 1.5)
lines(yrs2, gp.crn2[, 1], col = "grey50")
lines(yrs2, ffcsaps(gp.crn2[, 1], nyrs = 32),
col = "red", lwd = 2)
axis(1); axis(2); axis(3); axis(4)
box()
par(def.par)
library(utils)
data(gp.rwl)
data(gp.po)
gp.rwi <- cms(rwl = gp.rwl, po = gp.po)
gp.ids <- read.ids(gp.rwl, stc = c(0, 2, 1))
# On a running window
rwi.stats.running(gp.rwi, gp.ids)
## With no running window (i.e. running.window = FALSE)
rwi.stats(gp.rwi, gp.ids)
## Restrict to common overlap (in this case 1899 to 1987)
rwi.stats(gp.rwi, gp.ids, period="common")
rwi.stats.legacy(gp.rwi, gp.ids) # rwi.stats prior to dplR 1.5.3
## Not run:
library(graphics)
def.par <- par(no.readonly=TRUE)
## Plot the chronology showing a potential cutoff year based on EPS
eps.cut <- 0.92 # An arbitrary EPS cutoff for demonstration
gp.crn <- chron(gp.rwi)
## Running stats on the rwi with an window
foo <- rwi.stats.running(gp.rwi, gp.ids, window.length = 10)
yrs <- time(gp.crn)
bar <- data.frame(yrs = c(min(yrs), foo$mid.year, max(yrs)),
eps = c(NA, foo$eps, NA))
par(mar = c(2, 2, 2, 2), mgp = c(1.1, 0.1, 0), tcl = 0.25,
mfcol = c(2, 1), xaxs='i')
plot(yrs, gp.crn[, 1], type = "n", xlab = "Year",
ylab = "RWI", axes=FALSE)
cutoff <- max(bar$yrs[bar$eps < eps.cut], na.rm = TRUE)
xx <- c(500, 500, cutoff, cutoff)
yy <- c(-1, 3, 3, -1)
polygon(xx, yy, col = "grey80")
abline(h = 1, lwd = 1.5)
lines(yrs, gp.crn[, 1], col = "grey50")
lines(yrs, ffcsaps(gp.crn[, 1], nyrs = 32), col = "red", lwd = 2)
axis(1); axis(2); axis(3);
par(new = TRUE)
## Add EPS
plot(bar$yrs, bar$eps, type = "b", xlab = "", ylab = "",
axes = FALSE, pch = 20, col = "blue")
axis(4, at = pretty(foo$eps))
mtext("EPS", side = 4, line = 1.1)
box()
## Second plot is the chronology after the cutoff only
## Chronology is rebuilt using just years after cutoff but
## that difference is essentially nil.
yr.mask <- yrs > cutoff
yrs2 <- yrs[yr.mask]
gp.crn2 <- chron(gp.rwi[yr.mask, ])
plot(yrs2, gp.crn2[, 1], type = "n",
xlab = "Year", ylab = "RWI", axes=FALSE)
abline(h = 1, lwd = 1.5)
lines(yrs2, gp.crn2[, 1], col = "grey50")
lines(yrs2, ffcsaps(gp.crn2[, 1], nyrs = 32),
col = "red", lwd = 2)
axis(1); axis(2); axis(3); axis(4)
box()
par(def.par)
library(utils)
data(gp.rwl)
data(gp.po)
gp.rwi <- cms(rwl = gp.rwl, po = gp.po)
gp.ids <- read.ids(gp.rwl, stc = c(0, 2, 1))
# On a running window
rwi.stats.running(gp.rwi, gp.ids)
## With no running window (i.e. running.window = FALSE)
rwi.stats(gp.rwi, gp.ids)
## Restrict to common overlap (in this case 1899 to 1987)
rwi.stats(gp.rwi, gp.ids, period="common")
rwi.stats.legacy(gp.rwi, gp.ids) # rwi.stats prior to dplR 1.5.3
## Not run:
library(graphics)
def.par <- par(no.readonly=TRUE)
## Plot the chronology showing a potential cutoff year based on EPS
eps.cut <- 0.92 # An arbitrary EPS cutoff for demonstration
gp.crn <- chron(gp.rwi)
## Running stats on the rwi with an window
foo <- rwi.stats.running(gp.rwi, gp.ids, window.length = 50)
yrs <- time(gp.crn)
bar <- data.frame(yrs = c(min(yrs), foo$mid.year, max(yrs)),
eps = c(NA, foo$eps, NA))
par(mar = c(2, 2, 2, 2), mgp = c(1.1, 0.1, 0), tcl = 0.25,
mfcol = c(2, 1), xaxs='i')
plot(yrs, gp.crn[, 1], type = "n", xlab = "Year",
ylab = "RWI", axes=FALSE)
cutoff <- max(bar$yrs[bar$eps < eps.cut], na.rm = TRUE)
xx <- c(500, 500, cutoff, cutoff)
yy <- c(-1, 3, 3, -1)
polygon(xx, yy, col = "grey80")
abline(h = 1, lwd = 1.5)
lines(yrs, gp.crn[, 1], col = "grey50")
lines(yrs, ffcsaps(gp.crn[, 1], nyrs = 32), col = "red", lwd = 2)
axis(1); axis(2); axis(3);
par(new = TRUE)
## Add EPS
plot(bar$yrs, bar$eps, type = "b", xlab = "", ylab = "",
axes = FALSE, pch = 20, col = "blue")
axis(4, at = pretty(foo$eps))
mtext("EPS", side = 4, line = 1.1)
box()
## Second plot is the chronology after the cutoff only
## Chronology is rebuilt using just years after cutoff but
## that difference is essentially nil.
yr.mask <- yrs > cutoff
yrs2 <- yrs[yr.mask]
gp.crn2 <- chron(gp.rwi[yr.mask, ])
plot(yrs2, gp.crn2[, 1], type = "n",
xlab = "Year", ylab = "RWI", axes=FALSE)
abline(h = 1, lwd = 1.5)
lines(yrs2, gp.crn2[, 1], col = "grey50")
lines(yrs2, ffcsaps(gp.crn2[, 1], nyrs = 32),
col = "red", lwd = 2)
axis(1); axis(2); axis(3); axis(4)
box()
par(def.par)
foo
head(core)
cms
?cms
gp.rwl
gp.po
?read.ids
gp.ids
gp.ids <- read.ids(gp.rwl, stc = c(0, 2, 1))
gp.rwi
gp.rwl
gp.rwi <- cms(rwl = gp.rwl, po = gp.po)
gp.rwi
# On a running window
rwi.stats.running(gp.rwl, gp.ids)
core <- read.rwl(paste0("raw_data/cores/", f))
filenames
filenames <- list.files("raw_data/cores/")
filenames
f = "caco_drop.rwl"
core <- read.rwl(paste0("raw_data/cores/", f))
read.ids(core)
core
read.ids(core, stc = c("auto"))
core.ids <- read.ids(core, stc = c("auto"))
rwi.stats.running(gp.rwl, gp.ids)
rwi.stats.running(core, core.ids)
core <- rwi.stats.running(core, core.ids)
for(f in filenames) {
core <- read.rwl(paste0("raw_data/cores/", f))
core.ids <- read.ids(core, stc = c("auto"))
core <- rwi.stats.running(core, core.ids)
print(core$eps)}
for(f in filenames) {
print(f)
core <- read.rwl(paste0("raw_data/cores/", f), )
core.ids <- read.ids(core, stc = c("auto"))
core <- rwi.stats.running(core, core.ids)
print(core$eps)}
core
core.ids
names(read.rwl(paste0("raw_data/cores/", f)))
View(core)
core
rwi.stats.core[, c(1,3, 4, 15)]
core <- read.rwl(paste0("raw_data/cores/", f))
core.ids <- read.ids(core, stc = c("auto"))
rwi.stats.core <- rwi.stats.running(core, core.ids)
core.eps <- NULL
core.eps <- rbind(core.eps, rwi.stats.core[, c(1,3, 4, 15)])
core.eps
substr(f, 1,4)
core.eps <- NULL
for(f in filenames) {
print(f)
core <- read.rwl(paste0("raw_data/cores/", f))
core.ids <- read.ids(core, stc = c("auto"))
rwi.stats.core <- rwi.stats.running(core, core.ids)
core.eps <- rbind(core.eps, data.frame(Species = substr(f, 1,4), rwi.stats.core[, c(1,3, 4, 15)]))
print(core$eps)}
core.eps
?rwi.stats.running
core.eps <- NULL
for(f in filenames) {
print(f)
core <- read.rwl(paste0("raw_data/cores/", f))
core.ids <- read.ids(core, stc = c("auto"))
rwi.stats.core <- rwi.stats.running(core, core.ids, prewhiten = T)
core.eps <- rbind(core.eps, data.frame(Species = substr(f, 1,4), rwi.stats.core[, c(1,3, 4, 15)]))
print(core$eps)}
core.eps
rwi.stats.core
core.eps <- NULL
for(f in filenames) {
print(f)
core <- read.rwl(paste0("raw_data/cores/", f))
core.ids <- read.ids(core, stc = c("auto"))
rwi.stats.core <- rwi.stats.running(core, core.ids, prewhiten = T)
core.eps <- rbind(core.eps, data.frame(Species = substr(f, 1,4), rwi.stats.core[, c(1,3, 4, 14, 15)]))
print(core$eps)}
core.eps
rwi.stats.core
core.eps <- NULL
for(f in filenames) {
print(f)
core <- read.rwl(paste0("raw_data/cores/", f))
core.ids <- read.ids(core, stc = c("auto"))
rwi.stats.core <- rwi.stats.running(core, core.ids, prewhiten = T)
core.eps <- rbind(core.eps, data.frame(Species = substr(f, 1,4), rwi.stats.core))
print(core$eps)}
core
core.eps
core.eps
tail(core.eps)
(core.eps[45,])
(core.eps[46,])
sprintf("<sendmailR@\\%s>", Sys.info()[4])
