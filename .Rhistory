setwd(".")
# Load libraries ####
library(dplR)
# library(bootRes)
library(caTools)
source("scripts/0-Plotting_Function_for_dcc_and_mdcc_Functions.R")
# Define parameters and variables ####
## saving or not saving outputs ? ####
save.plots <- TRUE
save.result.table <- TRUE
## Define order of the species in the  plots ####
SPECIES_IN_ORDER <- toupper(c("litu", "qual", "quru", "quve", "qupr", "fram", "cagl", "caco", "cato", "juni", "fagr", "caov", "pist", "frni"))
## Define sets of climate data to use ####
climate.data.types <- c("PRISM_SCBI_1930_2015_30second", "CRU_SCBI_1901_2016", "NOAA_PDSI_Northern_Virginia_1895_2017")
## Define sets of methods to run ####
methods.to.run <- c("moving_correlation") # c("correlation", "response", "moving_correlation")
## Define how to run it regarding the starting year ####
type.of.start.date <- c("Going_back_as_far_as_possible", "Going_back_to_1920", "Going_back_to_1980") # Going_back_at_earliest_common_year")
## Define sss threshold ####
sss.threshold = 0.75
## Define start and end month for anlaysis ####
start <- -4 # April of previous year
end <- 8 # August of current year
start.frs <- -10 # october of previous year (for freeze days variable only - otherwise error because all 0 in other months)
end.frs <- 5 # may of current year (for freeze days variable only)
# Load and prepare core data ####
filenames <- list.dirs("data", full.names = F, recursive = F  ) # filenames <- list.files("raw_data/cores/")
filenames <- filenames[!grepl("[a-z]", filenames)] # keep only all caps names
all_sss <- NULL
for(f in filenames) {
# get the raw data
core_raw <- read.rwl(paste0("raw_data/cores/", tolower(f), "_drop.rwl"))
# get the detrended data
core <- read.table(paste0("data/", f,"/ARSTANfiles/", tolower(f), "_drop.rwl_tabs.txt"), sep = "\t", h = T)
core <- data.frame(res = core$res,  samp.depth = core$num, row.names = core$year)
# get the Subsample Signal Strength (sss as function of the number of trees in sample, the last one appearing in the "xxx_drop.rxl_out.txt files)
sss <- readLines(paste0("data/", f,"/ARSTANfiles/", tolower(f), "_drop.rwl_out.txt"))
sss <- sss[grep("sss", sss)]
sss <- sss[grep("  sss:   ", sss)[c(rep(FALSE, 3*length(seq(grep("  sss:   ", sss)))/4), rep(TRUE, 1*length(seq(grep("  sss:   ", sss)))/4))]] # keep only last rows that have sss: in them
sss <- sub("  sss:   ", "", sss)
sss <- as.numeric(unlist(strsplit(sss, " " ))) # keep only numbers and store them as a vector
sss <- data.frame(Species = f, "Num_of_trees" = 1:length(sss), sss)
Year_to_Num_of_trees <- apply(core_raw, 1, function(x) sum(!is.na(x)))
Year_to_Num_of_trees <- data.frame(Species = f, Year = as.numeric(names(Year_to_Num_of_trees)), Num_of_trees= Year_to_Num_of_trees)
match(Year_to_Num_of_trees$Num_of_trees, sss$Num_of_trees)
Year_to_Num_of_trees$sss <- NA
for(i in 1:nrow(Year_to_Num_of_trees)) {
Year_to_Num_of_trees$sss[i] <- rev(sss[sss$Num_of_trees <= Year_to_Num_of_trees$Num_of_trees[i],]$sss)[1]
}
sss <- Year_to_Num_of_trees
# for(i in 1:nrow(sss)) {
#   year_with_x_trees <- Year_to_Num_of_trees[Year_to_Num_of_trees >= sss$Num_of_trees[i]]
#   sss$Year[i] <- as.numeric(names(year_with_x_trees)[1])
# }
# core <- read.rwl(paste0("raw_data/cores/", f))
# core <- detrend(core, f = 0.5, nyrs = 32, method = "Spline", make.plot = TRUE) # detrend/smooth the time series
# core <- chron(core)
assign(f, core)
assign(paste0(f, "_sss"), sss)
all_sss <- rbind(all_sss, sss)
}
# save SSS for all species
write.csv(all_sss, file = "results/SSS_as_a_function_of_the_number_of_trees_in_sample.csv", row.names = F)
## Define start and end year for analysis, common to all species and one for each species ####
start.years <- NULL # species specific
for(f in filenames) {
sss <- get(paste0(f, "_sss"))
start.years <- c(start.years, sss[sss$sss >= sss.threshold, ]$Year[1])
}
end.year = 2009  # common to all species
# Plot SSS for the the decided threshold ####
if(save.plots) tiff("results/SSS_as_a_function_of_the_number_of_trees_in_sample.tiff", res = 150, width = 169, height = 169, units = "mm", pointsize = 10)
op <- par(mfrow = c(2, 1), oma = c(5, 5, 2, 0), mar = c(0, 0, 0, 1))
cols <- data.frame(col = rainbow(length(filenames)), row.names = filenames, stringsAsFactors = F)
years <- NULL
for(sp in levels(all_sss$Species)){
x = all_sss[all_sss$Species %in% sp,]
year <- x$Year[x$sss > sss.threshold][1]
years <- c(years, year)
}
plot.nb <- 1
for(sp in levels(all_sss$Species)){
x <- all_sss[all_sss$Species %in% sp,]
x <- x[x$Year <= end.year,]
# n.core <- x$Num_of_trees[x$sss > sss.threshold][1]
if(plot.nb %in% 1) {
plot(Num_of_trees ~ Year, data = x, type = "l", col = cols[sp,], xlim = c(min(all_sss$Year), end.year), ylim = range(all_sss$Num_of_trees), lwd = 2, log = "y", las = 1, ylab = "", xaxt = "n")
mtext(side= 2 , "log(No. cores)", line = 3)
axis(1, labels = F, tcl = 0.5)
axis(1, labels = F, tcl = -0.5)
# mtext(side= 1 , "Year", line = 3, outer = T)
# abline(v = n.core, lty = 3, col = cols[sp,])
# abline(h = 0.75, lty = 2)
# axis(2, tck = 0.01, labels = F)
} else {
lines(Num_of_trees ~ Year, data = x, col = cols[sp,], lwd = 2)
# abline(v = x$Num_of_trees[x$sss > sss.threshold][1], lty = 3, col = cols[sp,])
}
# n.cores <- c(n.cores, n.core)
plot.nb <- plot.nb +1
}
abline(v =years,  col = cols$col, lty = 2)
# abline(h =n.cores,  col = cols$col, lty = 3)
# legend("topleft", col = cols$col, lty = 1, bty = "n", legend = levels(all_sss$Species), lwd = 2, cex = 0.8)
legend("topleft", col = cols$col, lty = 1, bty = "n", legend = paste(levels(all_sss$Species), years, sep = " - "), lwd = 2, cex = 0.8)
plot.nb <- 1
for(sp in levels(all_sss$Species)){
x <- all_sss[all_sss$Species %in% sp,]
x <- x[x$Year <= end.year,]
year <- x$Year[x$sss > sss.threshold][1]
if(plot.nb %in% 1) {
plot(sss ~ Year, data = x, type = "l", col = cols[sp,], xlim = c(min(all_sss$Year), end.year), lwd = 2, las = 1, xaxt = "n")
abline(v = year, lty = 2, col = cols[sp,])
abline(h = 0.75, lty = 3)
# axis(2, tck = 0.01, las = 1)
axis(1, labels = T, tcl = 0.5)
axis(1, labels = F, tcl = -0.5)
mtext(side= 2 , "sss", line = 3)
} else {
lines(sss ~ Year, data = x, col = cols[sp,], lwd = 2)
abline(v = x$Year[x$sss > sss.threshold][1], lty = 2, col = cols[sp,])
}
# years <- c(years, year)
plot.nb <- plot.nb +1
}
# legend("topleft", col = cols$col, lty = 1, bty = "n", legend = paste(levels(all_sss$Species), years, sep = " - "), lwd = 2, cex = 0.8)
title(paste("SSS threshold =", sss.threshold), outer = T)
par(op)
if(save.plots) dev.off()
par(op)
# Run analysis for all types of climate data with all variables ####
for(c in climate.data.types) {
print(c)
## Load climate data ####
clim <- read.csv(paste0("raw_data/climate/Formated_", c, ".csv"))
### crop first and last year of NOAA data because outliers
if(c %in% "NOAA_PDSI_Northern_Virginia_1895_2017") {
clim <- clim[!(clim$year %in% min(clim$year) | clim$year %in% max(clim$year)), ]
}
### Pre_chiten PDSI of NOAA data because autocorrelated by definitiaon
if(c %in% "NOAA_PDSI_Northern_Virginia_1895_2017") {
clim$PDSI_prewhiten <- ar(clim$PDSI)$resid
clim$PHDI_prewhiten <- ar(clim$PHDI)$resid
clim$PMDI_prewhiten <- ar(clim$PMDI)$resid
}
### remove climate variables we don't care about
if(c %in% "NOAA_PDSI_Northern_Virginia_1895_2017") {
clim  <- clim[, !(colnames(clim) %in% c("SP02", "SP03", "SP06", "SP09", "SP12", "SP24"))]
}
if(c %in% "NOAA_PDSI_Northern_Virginia_1895_2017") {
clim  <- clim[, !(colnames(clim) %in% c("pet_sum"))]
}
### get a moving average and sd of climate varibales, by month
clim.moving.avg <- NULL
clim.moving.sd <- NULL
for(mth.i in (unique(clim$month))) {
mth <- tolower(month.abb[mth.i])
x.clim <- clim[clim$month %in% mth.i, ]
x.clim.ma <- apply(x.clim, 2, runmean, k = 25, endrule = "NA", align = "center")
x.clim.msd <- apply(x.clim, 2, runsd, k = 25, endrule = "NA", align = "center")
rownames(x.clim.ma) <- paste(x.clim$year-12, x.clim$year + 12, sep = "-")
rownames(x.clim.msd) <- paste(x.clim$year-12, x.clim$year + 12, sep = "-")
clim.moving.avg[[mth]] <- x.clim.ma
clim.moving.sd[[mth]] <- x.clim.msd
}
## Run analysis on core data ####
for(type.start in type.of.start.date) {
print(type.start)
dir.create(paste0("results/", type.start), showWarnings = F)
dir.create(paste0("results/", type.start, "/figures"), showWarnings = F)
dir.create(paste0("results/", type.start, "/tables"), showWarnings = F)
if(type.start %in% "Going_back_to_1920") overall.start.year <- 1920
if(type.start %in% "Going_back_to_1980") overall.start.year <- 1980
if(type.start %in% "Going_back_at_earliest_common_year") overall.start.year <- max(start.years) # common to all species
for(method.to.run in methods.to.run) {
print(method.to.run)
dir.create(paste0("results/", type.start, "/tables/monthly_", method.to.run ), showWarnings = F)
all.dcc.output <- NULL
### run analysis ###
for(f in filenames) {
print(f)
core <- get(f)
core <- core[rownames(core) %in% clim$year, ] # trim to use only years for which with have clim data
start.year <- max(min(clim$year), ifelse(type.start %in% "Going_back_as_far_as_possible", start.years[which(filenames %in% f)], overall.start.year))
dcc.output <- NULL
for (v in names(clim)[-c(1:2)]) {
print(v)
if(method.to.run %in% c("correlation", "response")) {
dcc.output <- rbind(dcc.output, bootRes::dcc(core, clim[, c("year", "month", v)], method = method.to.run, start = ifelse(v %in% "frs", start.frs, start), end = ifelse(v %in% "frs", end.frs, end), timespan = c(start.year, end.year)))
}
if(method.to.run %in% "moving_correlation" & type.start %in% "Going_back_as_far_as_possible") {
all.dcc.output[[f]][[v]] <- bootRes::mdcc(core, clim[, c("year", "month", v)], method = "corr", start = ifelse(v %in% "frs", start.frs, start), end = ifelse(v %in% "frs", end.frs, end), timespan = c(start.year, end.year), win.size = 25, win.offset = 1, startlast = T,  boot = TRUE, ci = 0.05)
}
}# for (v in names(clim)[-c(1:2)])
if(method.to.run %in% c("correlation", "response")) {
all.dcc.output <- rbind(all.dcc.output, data.frame(cbind(Species = substr(f, 1, 4), dcc.output)))
}
} # for(f in filenames)
### clean and save results###
if(method.to.run %in% c("correlation", "response")) {
all.dcc.output$variable <- sapply(strsplit(row.names(all.dcc.output), "\\."), function(x) x[1])
all.dcc.output$month <- sapply(strsplit(row.names(all.dcc.output), "\\."), function(x) paste(x[2], x[3], sep ="."))
all.dcc.output$month <- gsub("[0-9]", "",   all.dcc.output$month)
if(save.result.table) write.csv(all.dcc.output, file = paste0("results/", type.start, "/tables/monthly_", method.to.run, "/", method.to.run, ifelse(grepl("corr", method.to.run), "_with_", "_to_"), c, "_climate_data.csv"), row.names = F)
}
if(method.to.run %in% c("moving_correlation") & type.start %in% "Going_back_as_far_as_possible") {
if(save.result.table) save(all.dcc.output, file = paste0("results/", type.start, "/tables/monthly_moving_correlation/moving_correlation_with_", c, "_climate_data.Rdata"))
}
## Plot results ####
if(method.to.run %in% c("correlation")) {
for(v in names(clim)[-c(1,2)]) {
print(v)
X <- all.dcc.output[all.dcc.output$variable %in% v, ]
x <- data.frame(reshape(X[, c("month", "Species", "coef")], idvar = "month", timevar = "Species", direction = "wide"))
rownames(x) <- ifelse(grepl("curr",  rownames(x)), toupper(rownames(x)), tolower( rownames(x)))
rownames(x) <- gsub(".*curr.|.*prev.", "",   rownames(x), ignore.case = T)
x.sig <- reshape(X[, c("month", "Species", "significant")], idvar = "month", timevar = "Species", direction = "wide")
colnames(x) <- gsub("coef.", "", colnames(x))
colnames(x.sig) <- gsub("significant.", "", colnames(x))
x <- x[, -1]
x.sig <- x.sig[, -1]
x <- x[, rev(SPECIES_IN_ORDER)]
x.sig <- x.sig[, rev(SPECIES_IN_ORDER)]
if(save.plots)  {
dir.create(paste0("results/", type.start, "/figures/monthly_", method.to.run), showWarnings = F)
dir.create(paste0("results/", type.start, "/figures/monthly_", method.to.run, "/", c), showWarnings = F)
tiff(paste0("results/", type.start, "/figures/monthly_", method.to.run, "/", c, "/", v, ".tif"), res = 150, width = 169, height = 169, units = "mm", pointsize = 10)
}
my.dccplot(x = as.data.frame(t(x)), sig = as.data.frame(t(x.sig)), main = v)
if(save.plots) dev.off()
} #   for(v in names(clim)[-c(1,2)])
} # if(method.to.run %in% c("correlation")
if(method.to.run %in% c("moving_correlation") & type.start %in% "Going_back_as_far_as_possible") {
## plot by SPECIES and by Climate variable ####
for(f in filenames) {
print(f)
for(v in names(clim)[-c(1,2)]) {
print(v)
X <- all.dcc.output[[f]][[v]]
X <- lapply(X, function(x) {
rownames(x) <- gsub(v,  "", rownames(x))
rownames(x) <- ifelse(grepl("curr",  rownames(x)), toupper(rownames(x)), tolower( rownames(x)))
rownames(x) <- gsub(".*curr.|.*prev.", "",   rownames(x), ignore.case = T)
return(x)
})
if(save.plots)  {
dir.create(paste0("results/", type.start, "/figures/monthly_moving_correlation"), showWarnings = F)
dir.create(paste0("results/", type.start, "/figures/monthly_moving_correlation/by_species_and_by_month"), showWarnings = F)
dir.create(paste0("results/", type.start, "/figures/monthly_moving_correlation/by_species_and_by_month/", c), showWarnings = F)
tiff(paste0("results/", type.start, "/figures/monthly_moving_correlation/by_species_and_by_month/", c, "/", f, "_", v, ".tif"), res = 150, width = 169, height = 169, units = "mm", pointsize = 10)
}
# op <- par(oma = c(1, 3, 5, 3), mai = c(1, 0.5, 0.2, 1)) #par(oma = c(0, 3, 5, 0), mai = c(0.5, 0.8, 0.2, 2))
# op <- par(mfrow = c(2, 1), oma = c(5, 5, 5, 5), mai = c(1, 0.5, 0.2, 1), mar = c(0,0,0,0))
my.mdccplot(x = X, main = paste(f, v, sep = " - "))
# par(op)
if(save.plots) dev.off()
} #   for(v in names(clim)[-c(1,2)])
} # for(f in filenames)
## plot all Species together for each Climate variable and each month of the growing season ####
for(v in names(clim)[-c(1,2)]) {
print(v)
for(mth in switch(v,frs = c("apr", "may"), c("apr", "may", "jun", "jul"))) {
print(mth)
X <- lapply(lapply(all.dcc.output, "[[", v), function(x){
x <- x[["coef"]][paste0(v, ".curr.", mth),]
x <- x[,c(grep(overall.start.year+1, substr(names(x), 1, 4)):ncol(x))]
return(x)
})
X <- do.call(rbind, X)
Sig <- lapply(lapply(all.dcc.output, "[[", v), function(x){
x <- x[["significant"]][paste0(v, ".curr.", mth),]
x <- x[,c(grep(overall.start.year+1, substr(names(x), 1, 4)):ncol(x))]
return(x)
})
Sig <- do.call(rbind, Sig)
X <- list(coef = X, significant = Sig)
if(save.plots) {
dir.create(paste0("results/", type.start, "/figures/monthly_moving_correlation/by_curr_season_month_all_sp_together"), showWarnings = F)
dir.create(paste0("results/", type.start, "/figures/monthly_moving_correlation/by_curr_season_month_all_sp_together/", c), showWarnings = F)
tiff(paste0("results/", type.start, "/figures/monthly_moving_correlation/by_curr_season_month_all_sp_together/", c, "/", v, "_", mth, ".tif"), res = 150, width = 169, height = 169, units = "mm", pointsize = 10)
}
my.mdccplot(X, main = paste(v, mth, sep = " - "), clim.ma = clim.moving.avg[[mth]][, v][colnames(X$coef)], clim.sd = clim.moving.sd[[mth]][, v][colnames(X$coef)])
if(save.plots) dev.off()
} #  for(m in c( c("apr", "may", "jun", "jul")))
} #  for(v in names(clim)[-c(1,2)])
} #  if(method.to.run %in% c(""moving_correlation""))
} #  for(method.to.run in methods.to.run)
} # for(type.start in type.of.start.date)
} # for(c in climate.data.types)
# Clean environment ####
rm(list = ls())
# Set working directory as Shenandoah main folder ####
setwd(".")
# Load libraries ####
library(dplR)
# library(treeclim)
library(bootRes)
save.plots <- TRUE
save.result.table <- TRUE
# Define sets of climate data to use ###3
climate.data.types <- c("PRISM_SCBI_1930_2015_30second", "CRU_SCBI_1901_2016", "NOAA_PDSI_Northern_Virginia_1895_2017")
## Define how to run it regarding the starting year ####
type.of.start.date <- c("Going_back_as_far_as_possible", "Going_back_to_1920", "Going_back_to_1980") # Going_back_at_earliest_common_year")
# Summarize tables of results for each climate data ####
for( c in climate.data.types) {
print(c)
for(type.start in type.of.start.date) {
print(type.start)
## Load tables of results ####
all.dc.corr <- read.csv(paste0("results/", type.start, "/tables/monthly_correlation/correlation_with_", c, "_climate_data.csv"))
## Summarize by Variable and by species  ####
### Take the sum of all correlations (absolute) ####
summary_of_correlations_all <- rbind(tapply(all.dc.corr$coef, all.dc.corr$variable, function(x) sum(abs(x))))
rownames(summary_of_correlations_all) <- "All"
summary_of_correlations_by_sepcies <- tapply(all.dc.corr$coef, list(all.dc.corr$Species, all.dc.corr$variable) , function(x) sum(abs(x)), simplify = T)
summary_of_correlations <- data.frame(Summary_type = "Sum of all absolute correlations", Species = c(rownames(summary_of_correlations_all), rownames(summary_of_correlations_by_sepcies)), rbind(summary_of_correlations_all, summary_of_correlations_by_sepcies))
### Count the number of significant correlations ####
summary_of_significance_all <- rbind(tapply(all.dc.corr$significant, all.dc.corr$variable, function(x) sum(x)))
rownames(summary_of_significance_all) <- "All"
summary_of_significance_by_sepcies <- tapply(all.dc.corr$significant, list(all.dc.corr$Species, all.dc.corr$variable) , function(x) sum(x), simplify = T)
summary_of_significance <- data.frame(Summary_type = "Count of Significant correlations", Species = c(rownames(summary_of_significance_all), rownames(summary_of_significance_by_sepcies)), rbind(summary_of_significance_all, summary_of_significance_by_sepcies))
### Take the sum of all correlations (absolute) that are significant
idx <- all.dc.corr$significant
summary_of_significant_correlations_all <- rbind(tapply(all.dc.corr$coef[idx], all.dc.corr$variable[idx], function(x) sum(abs(x))))
rownames(summary_of_significant_correlations_all) <- "All"
summary_of_significant_correlations_by_sepcies <- tapply(all.dc.corr$coef[idx], list(all.dc.corr$Species[idx], all.dc.corr$variable[idx]) , function(x) sum(abs(x)), simplify = T)
summary_of_significant_correlations <- data.frame(Summary_type = "Sum of absolute significant correlations", Species = c(rownames(summary_of_significant_correlations_all), rownames(summary_of_significant_correlations_by_sepcies)), rbind(summary_of_significant_correlations_all, summary_of_significant_correlations_by_sepcies))
# Save ####
write.csv(rbind(summary_of_correlations, summary_of_significance, summary_of_significant_correlations),
file = paste0("results/", type.start, "/tables/monthly_correlation/SUMMARY_Correlation_with_", c, "_climate_data.csv"), row.names = F)
} # for(type.start in type.of.start.date)
} # for( c in climate.data.types)
######################################################
# Purpose: Scale cores to ANPP
# Developped by: Valentine Herrmann - HerrmannV@si.edu
# R version 3.4.4 (2018-03-15)
######################################################
# Clean environment ####
rm(list = ls())
# Set working directory as Shenandoah main folder ####
setwd(".")
# Load libraries ####
library(dplR)
library(bootRes)
save.plots <- TRUE
save.result.table <- TRUE
source("scripts/0-Plotting_Function_for_dcc_and_mdcc_Functions.R")
## Define how to run it regarding the starting year ####
type.of.start.date <- c("Going_back_as_far_as_possible", "Going_back_to_1920", "Going_back_to_1980") # Going_back_at_earliest_common_year")
# Load core data ####
filenames <- list.files("raw_data/cores/") # filenames <- list.files("raw_data/cores/")
for(f in filenames) {
print(f)
core <- read.rwl(paste0("raw_data/cores/", f))
assign(f, core)
}
# Load 2008 census data ####
load("data/scbi.stem1.rdata")
head(scbi.stem1)
# Define sets of climate data to use ####
climate.data.types <- c("PRISM_SCBI_1930_2015_30second", "CRU_SCBI_1901_2016", "NOAA_PDSI_Northern_Virginia_1895_2017")
# Get the linear relationship between growth in 2008 and DBH in 2008, for each species ####
## build up the data frame that link radius increment in 2008 and dbh in 2008
DF <- NULL
unknown_trees <- NULL
for(f in filenames) {
print(f)
core <- get(f)
for (t in names(core)) {
# get radius increment (take the average of 2007-2009)
r_inc_2008 <- mean(core[c("2007", "2008", "2009"), t], na.rm = T) # core["2008", t] #
# get dbh in 2008
tag <- sub("[a-z]{1,}", "", t, ignore.case = T) # remove last letter
tag <- sub("^0", "", tag ) # remove first zero if any
if(tag %in% scbi.stem1$tag) {
dbh_2008 <- scbi.stem1[scbi.stem1$tag %in% tag, ]$dbh
} else {
unknown_trees <- rbind(unknown_trees, data.frame(Species = substr(f, 1, 4), tag = t))
}
# append to big dataframe
DF <- rbind(DF, data.frame(Species = substr(f, 1, 4), r_inc_2008, dbh_2008))
}
}
for(type.start in type.of.start.date) {
print(type.start)
## Get the linear models definitions to be able to predict later
DBH_to_r_inc_lms <- list()
for(f in filenames) {
print(f)
df <- DF[DF$Species %in% substr(f, 1, 4),]
### look at relationship by species (+ plot)
if(save.plots)  tiff(paste0("results/", type.start, "/figures/Scaling_DBH_to_radius_increment/", substr(f, 1, 4), ".tif"), res = 300, width = 169, height = 169, units = "mm", pointsize = 10)
plot(df$r_inc_2008 ~ df$dbh_2008, main = substr(f, 1, 4), xlab = "dbh in 2008 (mm)", ylab = "radius increment in 2008 (mm)", xlim = c(0, 1500), ylim = c(0, 7))
lm1 <- lm(r_inc_2008  ~ dbh_2008, data =df)
abline(lm1, lty = ifelse(summary(lm1)$coefficients[2,4] < 0.05, 1, 2))
mtext(side = 3, adj = 0.95, paste("r_inc_2008 =", round(summary(lm1)$coefficients[1],2), "+", round(summary(lm1)$coefficients[2], 4), "dbh_2008"), line = -1)
mtext(side = 3, adj = 0.95, paste("P-value =", round(summary(lm1)$coefficients[2,4],4)), line = -2)
if(save.plots)  dev.off()
### save the model
DBH_to_r_inc_lms[[substr(f, 1, 4)]] <- lm1
}
# Calculate ANPP response for each species, each climate variable and each month ####
## For this:
# 1- Predict DBH in 2009 for all trees >10cm in full census 2008 of the species that were cored using the models defined in previous step
# 2- Do the same as 1) but for a year where there would be 1 unit increase in the climate varible (using the models defined in previous step + the response (calulated in script Calculate_and_plot_responses_between_tree-ring_chronologies_and_climate_variables.R)
# 3- Change DBH into AGB using SCBI allometries
# 4- Calculate ANPP for 2008 on a regular year (using values in 1)
# 5- Calculate ANPP for 2008 on a year with 1 unit increase in climate variable (using values in 2)
# 6- get the difference betwen 5 and 4 to get the ANPP response to climate variable
# 7- sum 6 per climate variable and month of the year
# 8- plot the quilt
ANPP_response <- NULL
for(c in climate.data.types) {
print(c)
## Load climate data + calculate SD of each variable
clim <- read.csv(paste0("raw_data/climate/Formated_", c, ".csv"))
### crop first and last year of NOAA data because outliers
if(c %in% "NOAA_PDSI_Northern_Virginia_1895_2017") {
clim <- clim[!(clim$year %in% min(clim$year) | clim$year %in% max(clim$year)), ]
}
### Pre_chiten PDSI of NOAA data because autocorrelated by definitiaon
if(c %in% "NOAA_PDSI_Northern_Virginia_1895_2017") {
clim$PDSI_prewhiten <- ar(clim$PDSI)$resid
clim$PHDI_prewhiten <- ar(clim$PHDI)$resid
clim$PMDI_prewhiten <- ar(clim$PMDI)$resid
}
### get SD
SDs <- apply(clim, 2, sd, na.rm = T)
assign(paste("SDs", c, sep = "_"), SDs)
## load the response coefficients of chronologies to climate variables (output of script Calculate_and_plot_responses_between_tree-ring_chronologies_and_climate_variables.R)
Results_response_climate <- read.csv(paste0("results/", type.start, "/tables/monthly_response/Response_to_", c, "_climate_data.csv"), stringsAsFactors = F)
## do steps 1 through 6 ####
pb <- txtProgressBar(style = 3, min = 1, max = nrow(Results_response_climate))
for(i in 1:nrow(Results_response_climate)) {
setTxtProgressBar(pb,i)
v <- Results_response_climate$variable[i]
m <- Results_response_climate$month[i]
sp <- tolower(Results_response_climate$Species[i])
coef <- Results_response_climate$coef[i]
# sd.v <- SDs[[v]]
lm1 <- DBH_to_r_inc_lms[[sp]]
# get the index of trees of the right species that were alive in 2008
idx <- substr(scbi.stem1$sp, 1, 4) %in% sp & scbi.stem1$DFstatus %in% "alive" & scbi.stem1$dbh >= 100  & !is.na(scbi.stem1$dbh)
# steps 1,2,3 - get the AGB for 2008, 2009 and 2009 if there were one unit of increase in climate variable ####
sp_complete <- ifelse(sp %in% "caov", "caovl", sp)
## AGB 2008
x <- data.frame(sp = sp_complete, dbh = scbi.stem1$dbh[idx])
source("scripts/0-scbi_Allometries.R")
agb_2008 <- x$agb * .47
## AGB 2009 (using DBH in 2009 predicted using linear model)
x <- data.frame(sp = sp_complete, dbh = scbi.stem1$dbh[idx] + c(2 * predict(object = lm1, newdata = data.frame(dbh_2008 = scbi.stem1$dbh[idx]))))
source("scripts/0-scbi_Allometries.R")
agb_2009 <- x$agb * .47
## AGB 2009 with one unit of increase in climate variable  (using DBH in 2009 predicted using  linear model + response coeficient)
x <- data.frame(sp = sp_complete, dbh = scbi.stem1$dbh[idx] + c(2 * (predict(object = lm1, newdata = data.frame(dbh_2008 = scbi.stem1$dbh[idx])) + coef))) # * sd.v)))
source("scripts/0-scbi_Allometries.R")
agb_2009_plus <- x$agb * .47
if(any(is.na(agb_2009_plus))) stop("Problem of trees becoming < 0 mm")
# 4- get ANPP_2008 on a normal year ####
ANPP_2008 <- sum(agb_2009 - agb_2008) / 25.6
# 5- get ANPP_2008 on a year with one unit of increase in climate variable ####
ANPP_2008_plus <- sum(agb_2009_plus - agb_2008) / 25.6
# 6 - get the difference between ANPP_2008 of a normal year and a year with one unit of increase in climate variable ####
ANPP_diff <- ANPP_2008_plus - ANPP_2008
# save ANPP response to 1 unit increase in climate variable into table
ANPP_response <- rbind(ANPP_response,
data.frame(Species = sp,
Climate_data = c,
variable = v,
month = m,
ANPP_response = ANPP_diff))
}
close(pb)
}
head(ANPP_response)
# 7- Sum ANPP response per climate variable and per month ####
ANPP_response[is.na(ANPP_response$ANPP_response), ]
X <- data.frame(ANPP_response = tapply(ANPP_response$ANPP_response, list(paste(ANPP_response$Climate_data, ANPP_response$variable, ANPP_response$month)), sum))
ANPP_response_total <- data.frame(Climate_data = sapply(strsplit(rownames(X), " "), "[[", 1),
variable = sapply(strsplit(rownames(X), " "), "[[", 2),
month = sapply(strsplit(rownames(X), " "), "[[", 3),
X)
## save ANPP_response by species, climate variable and by month ####
write.csv(ANPP_response, file = paste0("results/", type.start, "/tables/monthly_responses_ANPP_to_climate_variables/ANPP_response_by_species_climate_variable_and_month.csv"), row.names = F)
## save ANPP_response total, climate variable and by month ####
write.csv(ANPP_response_total, file = paste0("results/", type.start, "/tables/monthly_responses_ANPP_to_climate_variables/Total_ANPP_response_climate_variable_and_month.csv"), row.names = F)
# 8- plot the quilt ####
for( c in climate.data.types) {
print(c)
SDs <- get(paste("SDs", c, sep = "_"))
X <- ANPP_response_total[ANPP_response_total$Climate_data %in% c, ]
x <- data.frame(reshape(X[, c("month", "variable", "ANPP_response")], idvar = "month", timevar = "variable", direction = "wide"))
rownames(x) <- ifelse(grepl("curr",  x$month), toupper(x$month), tolower( x$month))
rownames(x) <- gsub(".*curr.|.*prev.", "",   rownames(x), ignore.case = T)
colnames(x) <- gsub("ANPP_response.", "", colnames(x))
x <- x[c(tolower(month.abb)[4:12],toupper(month.abb)[1:8]),]# order the months correctly
x <- x[, -1]
x.sig <- x
x.sig[] <- FALSE
# remove frs
if("frs" %in% names(x)) x <- x[,-which(names(x) %in% "frs")]
# get the SD in the right order
SDs <- SDs[colnames(x)] # put in right order
if(save.plots)  {
# dir.create(paste0("results/figures/monthly_responses_all_speciess_and_climate_variables/", c), showWarnings = F)
tiff(paste0("results/", type.start, "/figures/monthly_responses_ANPP_to_climate_variables/response_to_", c, ".tif"), res = 300, width = 169, height = 169, units = "mm", pointsize = 10)
}
my.dccplot(x = as.data.frame(t(x)), sig = as.data.frame(t(x.sig)), main = "")
axis(2, at = c(1:ncol(x))- ncol(x)/40, paste0("SD=", round(SDs,2)), las = 1, tick = 0, line = -0.5,  cex.axis = 0.8)
if(save.plots) dev.off()
}
} # for(type.start in type.of.start.date)
