# Figure 2 ####
## Define how to run it regarding the starting year ####
type.of.start.date <- c("Going_back_as_far_as_possible","Going_back_to_1980") # Going_back_at_earliest_common_year")
## plot ####
if(save.plots)  {
tiff(paste0("results/figures_for_manuscript/Figure_2.tif"), res = 300, width = 169, height = 100, units = "mm", pointsize = 10)
}
nf <- layout(mat = matrix(c(1,2,3), ncol = 3, byrow = T), widths = c(1,1,0.4))
# layout.show(nf)
plot.nb = 0
for(type.start in type.of.start.date) {
print(type.start)
plot.nb = plot.nb + 1
# Load data ####
ANPP_response_total <- read.csv(paste0("results/", type.start, "/tables/monthly_responses_ANPP_to_climate_variables/Total_ANPP_response_climate_variable_and_month.csv"))
X <- droplevels(ANPP_response_total[(ANPP_response_total$Climate_data %in% "CRU_SCBI_1901_2016" & ! ANPP_response_total$variable %in% "pet_sum")| (ANPP_response_total$Climate_data %in% "NOAA_PDSI_Northern_Virginia_1895_2017" & ANPP_response_total$variable %in% "PDSI_prewhiten"), ])
x <- data.frame(reshape(X[, c("month", "variable", "ANPP_response")], idvar = "month", timevar = "variable", direction = "wide"))
rownames(x) <- ifelse(grepl("curr",  x$month), toupper(x$month), tolower( x$month))
rownames(x) <- gsub(".*curr.|.*prev.", "",   rownames(x), ignore.case = T)
colnames(x) <- gsub("ANPP_response.", "", colnames(x))
x <- x[c(tolower(month.abb)[4:12],toupper(month.abb)[1:8]),]# order the months correctly
x <- x[, -1]
x.sig <- x.sig2 <- x
x.sig[] <- x.sig2[] <- FALSE
# remove frs
if("frs" %in% names(x)) x <- x[,-which(names(x) %in% "frs")]
# order the variables ####
# ---- BEFORE (order by influence on ANPP) -----
# order by influence on ANPP (defined as predicted changes summed across all months) in analysis going back as far as possible
# if(type.start %in% "Going_back_as_far_as_possible") {
#
#   ENERGY_VARIABLES.IN.ORDER <- names(sort(apply(x[c("MAY", "JUN", "JUL", "AUG"), c("pet", "dtr", "tmp", "tmn", "tmx")], 2, sum), decreasing = F))
#   DEFICIT_VARIABLES.IN.ORDER <- "PETminusPRE"
#   ENERGY_WATER_BALANCE_VARIABLES_IN_ORDER <- "PDSI_prewhiten"
#   MOISTURE_VARIABLES.IN.ORDER <- names(sort(apply(x[c("MAY", "JUN", "JUL", "AUG"), c("cld", "pre", "wet")], 2, sum), decreasing = F))
#
#   VARIABLES.IN.ORDER <- c(ENERGY_VARIABLES.IN.ORDER, DEFICIT_VARIABLES.IN.ORDER, ENERGY_WATER_BALANCE_VARIABLES_IN_ORDER, MOISTURE_VARIABLES.IN.ORDER)
# }
# ---- NOW (fix order)  ----
VARIABLES.IN.ORDER <- c("tmx", "tmp", "tmn", "dtr", "pet", "PETminusPRE", "PDSI_prewhiten",
"pre", "wet", "cld") # , "vap"
x <- x[, rev(VARIABLES.IN.ORDER)]
colnames(x) <- toupper(colnames(x))
colnames(x) <- gsub("PDSI_PREWHITEN" , "PDSI", colnames(x))
colnames(x) <- gsub("PETMINUSPRE" , "PET-PRE", colnames(x))
# plot (adapted my.dccplot function) ####
x = as.data.frame(t(x))
sig = as.data.frame(t(x.sig))
sig2 = as.data.frame(t(x.sig2))
main = ifelse(grepl("1980", type.start), "1980-2009", "1901-2009") # "[1901-1938]-2009"
rescale = T
if (!is.data.frame(x)) {
x <- x$coef
}
blues <- colorRamp(c("#FFFFFF", "#4B9EF2", "blue4"))
reds <- colorRamp(c("#FFFFFF", "#F25757", "red4"))
m <- dim(x)[1]
n <- dim(x)[2]
pos.max <- 0.12 #max(x)
neg.max <- 0.12 #abs(min(x))
# op <- par(no.readonly = TRUE)
if(plot.nb %in% 1 ) par(oma = c(1.5, 5, 0, 0))
if(plot.nb %in% c(1,2)) par(mar = c(0, 1.5, 6, 0))
# if(!plot.nb %in% c(1,2)) par(mar = c(0, 1.5, 4, 0))
plot(c(0.5, n + 0.5), c(0.5, m + 0.5), type = "n", xaxt = "n",
yaxt = "n", ylab = "", xlab = "")
# x-axis ####
axis(side = 3, at = 1:n, labels = colnames(x), las = 2) # change here
# y-axis ####
if(plot.nb %in% c(1)) {
axis(side = 2, at = 1:m, labels =rownames(x) , las = 1) # axis(side = 2, at = 1:m, labels = ifelse(grepl("PDSI", rownames(x)), expression(PDSI^1), rownames(x)) , las = 1)
} else {
axis(side = 2, at = 1:m, labels = F, las = 1)
}
# title ####
if(plot.nb %in% c(1,2)) title(main, line = 5, outer = F)
# plot quilt ####
X.left <- X.right <- Y.bottom <- Y.top <- x
X.left[] <- rep((1:n - 0.5), each = m)
X.right[] <- rep((1:n + 0.5), each = m)
Y.bottom[] <- rep(1:m - 0.5, n)
Y.top[] <- rep(1:m + 0.5, n)
x.left <- unlist(c(X.left))
x.right <- unlist(c(X.right))
y.bottom <- unlist(c(Y.bottom))
y.top <- unlist(c(Y.top))
xs <- unlist(c(x))
xs.sig <- unlist(c(sig))
xs.sig2 <- unlist(c(sig2))
color <- xs
color[xs <= 0] <- rgb(reds(abs(xs[xs <= 0])/ neg.max), maxColorValue = 255)
color[xs > 0] <- rgb(blues(xs[xs > 0]/ pos.max), maxColorValue = 255)
rect(x.left, y.bottom , x.right, y.top, col = color, border = "white")
# current vs previous year bars ####
par(xpd= NA)
if(plot.nb %in% c(1,2)) {
lines(x = 1:9, y = rep(12.15, 9), col = "grey", lwd = 2)
lines(x = 10:17, y = rep(12.15, 8), lwd = 2)
text(x = 5, y = 12.15, labels = "previous year", col = "grey", pos = 3)
text(x = 14, y = 12.15, labels = "current year", pos = 3)
} else {
lines(x = 1:9, y = rep(12.15, 9), col = "grey", lwd = 2)
lines(x = 10:17, y = rep(12.15, 8), lwd = 2)
}
# "energy" vs "water"' variable group bars ###
if(plot.nb %in% c(1)) {
lines(x = rep(-4, 3), y = 1:3, lwd = 2)
lines(x = rep(-4, 5), y = 6:10, lwd = 2)
text(x = -4.4, y = 1.8, labels = "Water variables", pos = 3, srt = 90)
text(x = -4.4, y = 7.7, labels = "Energy variables", pos = 3, srt = 90)
}
# add letter ####
text(x = -1, y = 13, paste0(letters[plot.nb], ")"), font = 2)
} # for(type.start in type.of.start.date)
# legend ####
par(mar = c(0,0,0,0))
plot.new( )
plot.window( xlim=c(0,10), ylim=c(0,50) )
leg.unit <- 3
start.unit <- 5
right.pos <- 1
leg.width <- 2
values <- seq(-1, 1, length = 11)
neg.rescaled.values <- round(seq(-neg.max, 0, length = 6),
2)
pos.rescaled.values <- rev(round(seq(pos.max, 0, length = 6),
2)[-6])
rescaled.values <- c(neg.rescaled.values, pos.rescaled.values)
for (i in 1:11) {
if (values[i] <= 0) {
polygon(c(right.pos, right.pos + leg.width, right.pos +
leg.width, right.pos), c(start.unit + ((i - 1) *
leg.unit), start.unit + ((i - 1) * leg.unit),
start.unit + (i * leg.unit), start.unit + (i *
leg.unit)), col = rgb(reds(abs(values[i])),
maxColorValue = 255), lty = 0)
text(right.pos + leg.width , start.unit + (i *
leg.unit) - leg.unit/2, ifelse(rescale, rescaled.values[i],
values[i]), pos = 4)
}
else {
polygon(c(right.pos, right.pos + leg.width, right.pos +
leg.width, right.pos), c(start.unit + ((i - 1) *
leg.unit), start.unit + ((i - 1) * leg.unit),
start.unit + (i * leg.unit), start.unit + (i *
leg.unit)), col = rgb(blues(values[i]), maxColorValue = 255),
lty = 0)
text(right.pos + leg.width, start.unit + (i *
leg.unit) - leg.unit/2, ifelse(rescale, rescaled.values[i],
values[i]), pos = 4)
}
} #  for (i in 1:11)
text(x = 5, y = start.unit + (i * leg.unit) + 3, labels = "Response", font = 2)
# dev.off ####
if(save.plots) dev.off()
# Supplementary figures - [climate variable]_species responses ####
## see this issue: https://github.com/SCBI-ForestGEO/climate_sensitivity_cores/issues/43
method.to.run = "correlation"
type.of.start.date <- c("Going_back_as_far_as_possible", "Going_back_to_1980") # Going_back_at_earliest_common_year")
ANPP_contribution <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/summary_data/ANPP_total_and_by_species.csv"), header=T) # this URL might change because it is a private repository. If it does, update if by copying the URL direcltly from github: go to https://github.com/EcoClimLab/SCBI-ForestGEO-Data_private/master/SCBI_numbers_and_facts/ANPP_total_and_by_species.csv, click on Raw, copy the URL and paste it in place of the current URL here, inbetween the quotes of this line of code.
SPECIES_IN_ORDER <- toupper(ANPP_contribution$species[ ANPP_contribution$species %in% c("litu", "qual", "quru", "quve", "qupr", "fram", "cagl", "caco", "cato", "juni", "fagr", "caovl", "pist", "frni")]) #toupper(c("litu", "qual", "quru", "quve", "qupr", "fram", "cagl", "caco", "cato", "juni", "fagr", "caov", "pist", "frni"))
SPECIES_IN_ORDER <- gsub("CAOVL", "CAOV", SPECIES_IN_ORDER)
# plot ####
for(v in c("pet", "dtr", "tmp", "tmn", "tmx", "cld", "pre", "vap", "wet", "PDSI_prewhiten", "PETminusPRE")) {
print(v)
if(save.plots)  {
tiff(paste0("results/figures_for_manuscript/supplementary_figures/", v, "_species_responses.tif"), res = 150, width = 150, height = 100, units = "mm", pointsize = 10)
}
nf <- layout(mat = matrix(c(1,2,3), ncol = 3, byrow = T), widths = c(1,1,0.4))
# layout.show(nf)
plot.nb = 0
for(type.start in type.of.start.date) {
plot.nb <- plot.nb + 1
if(v %in% "PDSI_prewhiten")  climate_data <- "NOAA_PDSI_Northern_Virginia_1895_2017" else climate_data <- "CRU_SCBI_1901_2016"
all.dcc.output <- read.csv(paste0("results/", type.start, "/tables/monthly_", method.to.run, "/", method.to.run, ifelse(grepl("corr", method.to.run), "_with_", "_to_"), climate_data, "_climate_data.csv"), stringsAsFactors = F)
X <- all.dcc.output[all.dcc.output$variable %in% v, ]
x <- data.frame(reshape(X[, c("month", "Species", "coef")], idvar = "month", timevar = "Species", direction = "wide"))
rownames(x) <- ifelse(grepl("curr",  x$month), toupper( x$month), tolower(  x$month))
rownames(x) <- gsub(".*curr.|.*prev.", "",   rownames(x), ignore.case = T)
x.sig <- reshape(X[, c("month", "Species", "significant")], idvar = "month", timevar = "Species", direction = "wide")
x.sig2 <- reshape(X[, c("month", "Species", "significant2")], idvar = "month", timevar = "Species", direction = "wide")
colnames(x) <- gsub("coef.", "", colnames(x))
colnames(x.sig) <- gsub("significant.", "", colnames(x.sig))
colnames(x.sig2) <- gsub("significant2.", "", colnames(x.sig2))
x <- x[, -1]
x.sig <- x.sig[, -1]
x.sig2 <- x.sig2[, -1]
x <- x[, rev(SPECIES_IN_ORDER)]
x.sig <- x.sig[, rev(SPECIES_IN_ORDER)]
x.sig2 <- x.sig2[, rev(SPECIES_IN_ORDER)]
# plot (adapted my.dccplot function)
x = as.data.frame(t(x))
sig = as.data.frame(t(x.sig))
sig2 = as.data.frame(t(x.sig2))
main = ifelse(grepl("1980", type.start), "1980-2009", "1901-2009") # "[1901-1938]-2009"
ylab = toupper(v) ; ylab = gsub("PETMINUSPRE", "PET-PRE", ylab)
rescale = T
if (!is.data.frame(x)) {
x <- x$coef
}
blues <- colorRamp(c("#FFFFFF", "#4B9EF2", "blue4"))
reds <- colorRamp(c("#FFFFFF", "#F25757", "red4"))
m <- dim(x)[1]
n <- dim(x)[2]
pos.max <- 0.65 #max(x)
neg.max <- 0.65 #abs(min(x))
# op <- par(no.readonly = TRUE)
if(plot.nb %in% 1 ) par(oma = c(1.5, 4, 0, 0))
if(plot.nb %in% c(1,2)) par(mar = c(0, 1.5, 7, 0))
if(!plot.nb %in% c(1,2)) par(mar = c(0, 1.5, 4, 0))
plot(c(0.5, n + 0.5), c(0.5, m + 0.5), type = "n", xaxt = "n",
yaxt = "n", ylab = "", xlab = "")
# x-axis ####
axis(side = 3, at = 1:n, labels = colnames(x), las = 2) # change here
# y-axis ####
if(plot.nb %in% c(1,3,5)) {
axis(side = 2, at = 1:m, labels = rownames(x), las = 1)
mtext(side = 2, ylab, line = 4)
} else {
axis(side = 2, at = 1:m, labels = FALSE, las = 1)
}
# title ####
if(plot.nb %in% c(1,2)) title(main, line = 5, outer = F)
# plot quilt ####
X.left <- X.right <- Y.bottom <- Y.top <- x
X.left[] <- rep((1:n - 0.5), each = m)
X.right[] <- rep((1:n + 0.5), each = m)
Y.bottom[] <- rep(1:m - 0.5, n)
Y.top[] <- rep(1:m + 0.5, n)
x.left <- unlist(c(X.left))
x.right <- unlist(c(X.right))
y.bottom <- unlist(c(Y.bottom))
y.top <- unlist(c(Y.top))
xs <- unlist(c(x))
xs.sig <- unlist(c(sig))
xs.sig2 <- unlist(c(sig2))
color <- xs
color[xs <= 0] <- rgb(reds(abs(xs[xs <= 0])/ neg.max), maxColorValue = 255)
color[xs > 0] <- rgb(blues(xs[xs > 0]/ pos.max), maxColorValue = 255)
rect(x.left, y.bottom , x.right, y.top, col = color, border = "white")
points((x.left + x.right) /2 , (y.bottom + y.top) /2, bg = ifelse(xs.sig,  "white", "transparent"), col = ifelse(xs.sig, "black", "transparent"), pch = 21)
points((x.left + x.right) /2 , (y.bottom + y.top) /2, bg = ifelse(xs.sig2,  "white", "transparent"), col = ifelse(xs.sig2, "black", "transparent"), pch = 24)
# current vs previous year bars ####
par(xpd= NA)
if(plot.nb %in% c(1,2)) {
lines(x = 1:9, y = rep(16.8, 9), col = "grey", lwd = 2)
lines(x = 10:17, y = rep(16.8, 8), lwd = 2)
text(x = 5, y = 16.8, labels = "previous year", col = "grey", pos = 3)
text(x = 14, y = 16.8, labels = "current year", pos = 3)
} else {
lines(x = 1:9, y = rep(16.8, 9), col = "grey", lwd = 2)
lines(x = 10:17, y = rep(16.8, 8), lwd = 2)
}
# add letter ####
text(x = -1, y = 18, paste0(letters[plot.nb], ")"), font = 2)
} #  for(type.start in type.of.start.date[c(1,3)])
# legend ####
par(mar = c(0,0,0,0))
plot.new( )
plot.window( xlim=c(0,10), ylim=c(0,100) )
leg.unit <- 3.5
start.unit <- 30
right.pos <- 1
leg.width <- 2
values <- seq(-1, 1, length = 11)
neg.rescaled.values <- round(seq(-neg.max, 0, length = 6),
2)
pos.rescaled.values <- rev(round(seq(pos.max, 0, length = 6),
2)[-6])
rescaled.values <- c(neg.rescaled.values, pos.rescaled.values)
for (i in 1:11) {
if (values[i] <= 0) {
polygon(c(right.pos, right.pos + leg.width, right.pos +
leg.width, right.pos), c(start.unit + ((i - 1) *
leg.unit), start.unit + ((i - 1) * leg.unit),
start.unit + (i * leg.unit), start.unit + (i *
leg.unit)), col = rgb(reds(abs(values[i])),
maxColorValue = 255), lty = 0)
text(right.pos + leg.width , start.unit + (i *
leg.unit) - leg.unit/2, ifelse(rescale, rescaled.values[i],
values[i]), pos = 4)
}
else {
polygon(c(right.pos, right.pos + leg.width, right.pos +
leg.width, right.pos), c(start.unit + ((i - 1) *
leg.unit), start.unit + ((i - 1) * leg.unit),
start.unit + (i * leg.unit), start.unit + (i *
leg.unit)), col = rgb(blues(values[i]), maxColorValue = 255),
lty = 0)
text(right.pos + leg.width, start.unit + (i *
leg.unit) - leg.unit/2, ifelse(rescale, rescaled.values[i],
values[i]), pos = 4)
}
} #  for (i in 1:11)
text(x = 5, y = start.unit + (i * leg.unit) + 3, labels = "Correlation", font = 2)
legend(x = 1, y = 25 , pch =  c(21, 24), bg = "white", col = "black", legend = c( "0.05", "0.0002"), bty = "n")
text(x = 5, y = 26, labels = "Significance", font = 2)
# dev.off ####
if(save.plots) dev.off()
} # for(v in c("pet", "cld", "PETminusPRE"))
# Supplementary figures - [climate variable]_SUMMARY ####
mean_and_std_of_clim <- read.csv("results/climate/mean_and_std_of_climate_variables.csv")
if(save.plots)  {
tiff(paste0("results/climate/climate_variables_monthy_means_for_both_time_preiods.tif"), res = 150, width = 120, height = 150, units = "mm", pointsize = 10)
}
par(mfrow = c(5,2))
par(mar = c(1, 4, 0, 0), oma = c(3, 0, 1, 0))
plot.nb = 1
for(v in c("pre", "wet",
"cld", "tmx",
"tmp", "tmn",
"dtr", "pet",
"PETminusPRE", "PDSI")) { # unique(mean_and_std_of_clim$variable)
# if(save.plots)  {
#   tiff(paste0("results/climate//", v, "_monthy_mean_for_both_time_preiods.tif"), res = 150, width = 150, height = 100, units = "mm", pointsize = 10)
# }
ylab <- toupper(v) ; ylab <- gsub("PETMINUSPRE", "PET-PRE", ylab)
if(ylab %in% "PDSI_PREWHITEN") ylab <- bquote(PDSI^1)
X.mean <- mean_and_std_of_clim[mean_and_std_of_clim$variable %in% v, grepl("mean", colnames(mean_and_std_of_clim))][, 1:12]
X.sd <- mean_and_std_of_clim[mean_and_std_of_clim$variable %in% v, grepl("sd", colnames(mean_and_std_of_clim))][, 1:12]
plot(x = 1:12, y = c(X.mean[1,]) , type = "l", xaxt = "n", xlab = "", ylab = "", bty = "L", ylim = range(min(X.mean) - max(X.sd), max(X.mean) + max(X.sd)), yaxt = "n", col = "blue")
polygon(x = c(1:12, 12:1), y = c(X.mean[1,]-X.sd[1,], rev(X.mean[1,]+X.sd[1,])), col = rgb(0,0,1,0.1), border = F)
polygon(x = c(1:12, 12:1), y = c(X.mean[2,]-X.sd[2,], rev(X.mean[2,]+X.sd[2,])), col = rgb(1,0,0,0.1), border = F)
lines(x = 1:12, y = c(X.mean[1,]), col = "blue")
lines(x = 1:12, y = c(X.mean[2,]), col = "red")
# x-axis
axis(1, at = 1:12, labels = F)
if(plot.nb %in% c(9, 10)) {
axis(1, at = 1:12, substr(month.abb,1,1))
mtext(1, text = "month", line = 2.5, cex = 0.8)
}
# y-axis
axis(2, las = 2)
mtext(2, text = ylab, line = 2.5, cex = 0.8)
# legend
if(plot.nb %in% 2) {
legend("bottomleft", lty = 1, col = c("blue", "red"),c("1901-2009", "1980-2009"), bty = "n") # "[1901-1938]-2009"
legend("topright", fill = rgb(0,0,0,0.1), border = "transparent", c("+/- SD"), bty = "n", x.intersp = 0.5)
}
# titles
mtext(side = 3, line = -1, text = paste0(letters[plot.nb], ")"), adj = 0.01, cex = 0.8)
plot.nb = plot.nb +1
}
if(save.plots) dev.off()
filenames
all_identical <- NULL
for(f in filenames[-13]) {
print(f)
sp <- toupper(substr(f, 1, 4))
sp_dropbox <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/climate sensitivity/results/z_FinalChronologies/', sp, '/', f))
sp_core <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/GitHub/SCBI-ForestGEO-Data_private/tree_cores/chronologies/current_chronologies/complete/', f))
sp_raw <- read.rwl(paste0('raw_data/cores/', f))
sp_data <- read.rwl(paste0('data/', ifelse(sp %in% "CAOV", "CAOVL", sp), '/', f))
all_identical <- rbind(all_identical, data.frame(sp = sp, identical = all(c(identical(sp_dropbox, sp_core), identical(sp_dropbox, sp_raw),  identical(sp_dropbox, sp_data)))))
}
all_identical
f = filenames[4]
sp <- toupper(substr(f, 1, 4))
sp_dropbox <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/climate sensitivity/results/z_FinalChronologies/', sp, '/', f))
sp_core <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/GitHub/SCBI-ForestGEO-Data_private/tree_cores/chronologies/current_chronologies/complete/', f))
sp_raw <- read.rwl(paste0('raw_data/cores/', f))
sp_data <- read.rwl(paste0('data/', ifelse(sp %in% "CAOV", "CAOVL", sp), '/', f))
all_identical <- rbind(all_identical, data.frame(sp = sp, identical = all(c(identical(sp_dropbox, sp_core), identical(sp_dropbox, sp_raw),  identical(sp_dropbox, sp_data)))))
dim(sp_dropbox)
dim(sp_core)
dim(sp_raw)
dim(sp_data)
colnames(sp_dropbox)[!colnames(sp_dropbox) %in% colnames(sp_core)]
######################################################
# Purpose: pull out and map census data for cored trees
# Developped by: Valentine Herrmann - HerrmannV@si.edu
# R version 3.4.4 (2018-03-15)
######################################################
# Clean environment ####
rm(list = ls())
# Set working directory as Shenandoah main folder ####
setwd(".")
# Load libraries ####
library(dplR)
library(bootRes)
library(RCurl)
save.result.table <- TRUE
# Load core data ####
filenames <- list.files("raw_data/cores/") # filenames <- list.files("raw_data/cores/")
for(f in filenames) {
print(f)
core <- read.rwl(paste0("raw_data/cores/", f))
assign(f, core)
}
# Load 2008 census data ####
# load("data/scbi.stem1.rdata")
url <- "https://raw.github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/tree_main_census/data/scbi.stem1.rdata"
download.file(url, "scbi.stem1.rdata", mode = "wb")
load("scbi.stem1.rdata")
file.remove("scbi.stem1.rdata")
head(scbi.stem1)
# load list of tree censused in 2010 (live trees) and trees censused im 20106-2017 (dead trees)
trees_censused_live <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data_private/master/tree_cores/measurement_files/measurement_notes_2010_chronology.csv?token=ASwxIfdeBgR-A0zbpC_2MwI0iY7o6UBmks5cLmO4wA%3D%3D"), header = T)
trees_censused_dead <- read.csv(text=getURL("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data_private/master/tree_cores/measurement_files/measurement_notes_2016_17_chronology.csv?token=ASwxIXP2rDj4rscIkWDZe_CjWZk2Z4P8ks5cLmPSwA%3D%3D"), header = T)
# pull out census data for cored trees ####
## build up the data frame that link radius increment in 2008 and dbh in 2008
census.data.for.cored.trees <- NULL
live.trees.2010.2011 <- NULL
dead.trees.2016.2017 <- NULL
for(f in filenames) {
print(f)
core <- get(f)
for (t in names(core)) {
# get census data in 2008
tag <- sub("[a-z]{1,}", "", t, ignore.case = T) # remove last letter
tag <- sub("^0", "", tag ) # remove first zero if any
if(tag %in% scbi.stem1$tag) {
census.data.for.cored.trees <- rbind(census.data.for.cored.trees, scbi.stem1[scbi.stem1$tag %in% tag & scbi.stem1$StemTag %in% 1, ][1,]) # adding [,1] because issue with tag 40873...
}
if(tag %in% trees_censused_live$Tag) live.trees.2010.2011 <- c(live.trees.2010.2011, tag)
if(tag %in% trees_censused_dead$Tag) dead.trees.2016.2017 <- c(dead.trees.2016.2017, tag)
if(tag %in% trees_censused_live & tag %in% trees_censused_dead) stop("tree in both coring periods")
} #  for (t in names(core))
} # for(f in filenames)
all_identical <- NULL
for(f in filenames[-13]) {
print(f)
sp <- toupper(substr(f, 1, 4))
sp_dropbox <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/climate sensitivity/results/z_FinalChronologies/', sp, '/', f))
sp_core <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/GitHub/SCBI-ForestGEO-Data_private/tree_cores/chronologies/current_chronologies/complete/', f))
sp_raw <- read.rwl(paste0('raw_data/cores/', f))
sp_data <- read.rwl(paste0('data/', ifelse(sp %in% "CAOV", "CAOVL", sp), '/', f))
all_identical <- rbind(all_identical, data.frame(sp = sp, identical = all(c(identical(sp_dropbox, sp_core), identical(sp_dropbox, sp_raw),  identical(sp_dropbox, sp_data)))))
}
all_identical
f = filenames[4]
sp <- toupper(substr(f, 1, 4))
sp_dropbox <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/climate sensitivity/results/z_FinalChronologies/', sp, '/', f))
sp_core <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/GitHub/SCBI-ForestGEO-Data_private/tree_cores/chronologies/current_chronologies/complete/', f))
sp_raw <- read.rwl(paste0('raw_data/cores/', f))
sp_data <- read.rwl(paste0('data/', ifelse(sp %in% "CAOV", "CAOVL", sp), '/', f))
all_identical <- rbind(all_identical, data.frame(sp = sp, identical = all(c(identical(sp_dropbox, sp_core), identical(sp_dropbox, sp_raw),  identical(sp_dropbox, sp_data)))))
dim(sp_dropbox)
dim(sp_core)
dim(sp_raw)
dim(sp_data)
colnames(sp_dropbox)[!colnames(sp_dropbox) %in% colnames(sp_core)]
filenames
# CAOVL
f = filenames[4]
sp <- toupper(substr(f, 1, 4))
sp_dropbox <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/climate sensitivity/results/z_FinalChronologies/', sp, '/', f))
sp_core <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/GitHub/SCBI-ForestGEO-Data_private/tree_cores/chronologies/current_chronologies/complete/', f))
sp_raw <- read.rwl(paste0('raw_data/cores/', f))
sp_data <- read.rwl(paste0('data/', ifelse(sp %in% "CAOV", "CAOVL", sp), '/', f))
f = filenames[4]
sp_dropbox <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/climate sensitivity/results/z_FinalChronologies/', sp, '/', f))
sp <- toupper(substr(f, 1, 4))
sp_core <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/GitHub/SCBI-ForestGEO-Data_private/tree_cores/chronologies/current_chronologies/complete/', f))
sp_raw <- read.rwl(paste0('raw_data/cores/', f))
sp_data <- read.rwl(paste0('data/', ifelse(sp %in% "CAOV", "CAOVL", sp), '/', f))
identical(sp_dropbox, sp_core)
dim(sp_dropbox)
dim(sp_core)
dim(sp_raw)
dim(sp_data)
names(sp_raw)
names(sp_core)
f
install.packages("swirl")
library(swirl)
swril()
swirl()
f = filenames[4]
sp <- toupper(substr(f, 1, 4))
sp_dropbox <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/climate sensitivity/results/z_FinalChronologies/', sp, '/', f))
sp_core <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/GitHub/SCBI-ForestGEO-Data_private/tree_cores/chronologies/current_chronologies/complete/', f))
sp_raw <- read.rwl(paste0('raw_data/cores/', f))
sp_data <- read.rwl(paste0('data/', ifelse(sp %in% "CAOV", "CAOVL", sp), '/', f))
sp_dropbox <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/climate sensitivity/results/z_FinalChronologies/', sp, '/', f))
sp_raw <- read.rwl(paste0('raw_data/cores/', f))
sp_data <- read.rwl(paste0('data/', ifelse(sp %in% "CAOV", "CAOVL", sp), '/', f))
f = filenames[4]
sp <- toupper(substr(f, 1, 4))
sp_dropbox <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/climate sensitivity/results/z_FinalChronologies/', sp, '/', f))
sp_core <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/GitHub/SCBI-ForestGEO-Data_private/tree_cores/chronologies/current_chronologies/complete/', f))
sp_raw <- read.rwl(paste0('raw_data/cores/', f))
sp_data <- read.rwl(paste0('data/', ifelse(sp %in% "CAOV", "CAOVL", sp), '/', f))
f = filenames[4]
f
sp <- toupper(substr(f, 1, 4))
sp_dropbox <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/climate sensitivity/results/z_FinalChronologies/', sp, '/', f))
sp_core <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/GitHub/SCBI-ForestGEO-Data_private/tree_cores/chronologies/current_chronologies/complete/', f))
sp_raw <- read.rwl(paste0('raw_data/cores/', f))
sp_data <- read.rwl(paste0('data/', ifelse(sp %in% "CAOV", "CAOVL", sp), '/', f))
data.frame(sp = sp, identical = all(c(identical(sp_dropbox, sp_core), identical(sp_dropbox, sp_raw),  identical(sp_dropbox, sp_data))))
filenames
f = filenames[2]
sp <- toupper(substr(f, 1, 4))
sp_dropbox <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/climate sensitivity/results/z_FinalChronologies/', sp, '/', f))
sp_core <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/GitHub/SCBI-ForestGEO-Data_private/tree_cores/chronologies/current_chronologies/complete/', f))
sp_raw <- read.rwl(paste0('raw_data/cores/', f))
sp_data <- read.rwl(paste0('data/', ifelse(sp %in% "CAOV", "CAOVL", sp), '/', f))
data.frame(sp = sp, identical = all(c(identical(sp_dropbox, sp_core), identical(sp_dropbox, sp_raw),  identical(sp_dropbox, sp_data))))
sp_raw <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/GitHub/', f))
sp_raw <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/GitHub/', f))
sp_raw <- read.rwl(paste0('C:/Users/HerrmannV/Dropbox (Smithsonian)/GitHub/', f))
data.frame(sp = sp, identical = all(c(identical(sp_dropbox, sp_core), identical(sp_dropbox, sp_raw),  identical(sp_dropbox, sp_data))))
dim(sp_dropbox)
dim(sp_core)
dim(sp_raw)
dim(sp_data)
colnames(sp_dropbox)[!colnames(sp_dropbox) %in% colnames(sp_core)]
colnames(sp_raw)[!colnames(sp_raw) %in% colnames(sp_core)]
any(duplicated(sp_raw))
sp_raw <- read.rwl(paste0('raw_data/cores/', f))
colnames(sp_raw)[!colnames(sp_raw) %in% colnames(sp_core)]
